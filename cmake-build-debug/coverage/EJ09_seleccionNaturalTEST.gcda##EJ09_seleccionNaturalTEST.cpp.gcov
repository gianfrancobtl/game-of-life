        -:    0:Source:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/tests/EJ09_seleccionNaturalTEST.cpp
        -:    0:Graph:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/tests/EJ09_seleccionNaturalTEST.gcno
        -:    0:Data:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/tests/EJ09_seleccionNaturalTEST.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "../ejercicios.h"
        -:    2:#include "gtest/gtest.h"
        -:    3:#include <algorithm>
        -:    4:
        -:    5:using namespace std;
        -:    6:
        -:    7:
        7:    8:TEST(seleccionNaturalTEST, toroideDiagonalVsUnoVivo){
        1:    8-block  0
        1:    8-block  1
        1:    8-block  2
        1:    8-block  3
        1:    8-block  4
        1:    8-block  5
        1:    8-block  6
    $$$$$:    8-block  7
    $$$$$:    8-block  8
    $$$$$:    8-block  9
    $$$$$:    8-block 10
    $$$$$:    8-block 11
    $$$$$:    8-block 12
        1:    8-block 13
        1:    8-block 14
        1:    8-block 15
        1:    8-block 16
        1:    8-block 17
        1:    8-block 18
        1:    8-block 19
        1:    8-block 20
        3:    9:    toroide t1 = { 
        1:    9-block  0
        1:    9-block  1
        3:    9-block  2
    $$$$$:    9-block  3
    $$$$$:    9-block  4
    $$$$$:    9-block  5
    $$$$$:    9-block  6
    $$$$$:    9-block  7
    $$$$$:    9-block  8
    $$$$$:    9-block  9
        1:   10:                  {true, false, false},
        1:   10-block  0
        1:   11:                  {false, true, false},
        1:   11-block  0
        1:   12:                  {false, false, true}}; 
        1:   12-block  0
        5:   13:    toroide t2 = { 
        1:   13-block  0
        1:   13-block  1
        5:   13-block  2
    $$$$$:   13-block  3
    $$$$$:   13-block  4
    $$$$$:   13-block  5
    $$$$$:   13-block  6
    $$$$$:   13-block  7
    $$$$$:   13-block  8
        1:   14:                  {false, false, false}, 
        1:   14-block  0
        1:   15:                  {false, false, false}, 
        1:   15-block  0
        1:   16:                  {false, true, false},
        1:   16-block  0
        1:   17:                  {false, false, false}, 
        1:   17-block  0
        1:   18:                  {false, false, false}};
        1:   18-block  0
        1:   19:    vector<toroide> ts;
        1:   20:    ts.push_back(t1);
        1:   20-block  0
        1:   21:    ts.push_back(t2);
        1:   21-block  0
        1:   22:    ts.push_back(t2);
        1:   22-block  0
        1:   23:    int res = seleccionNatural(ts);
        1:   23-block  0
        1:   23-block  1
    $$$$$:   23-block  2
        1:   24:    EXPECT_EQ(res, 0);
        1:   24-block  0
        1:   24-block  1
        1:   24-block  2
        1:   24-block  3
    $$$$$:   24-block  4
    $$$$$:   24-block  5
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
    $$$$$:   24-block 10
    $$$$$:   24-block 11
        1:   25:}
    $$$$$:   25-block  0
    $$$$$:   25-block  1
    $$$$$:   25-block  2
        1:   25-block  3
    $$$$$:   25-block  4
    $$$$$:   25-block  5
        -:   26:
        -:   27:// Borramos el test propuesto "DiagonalVSHorizontal porque no cumplía con la especificación".
        -:   28:
        7:   29:TEST(seleccionNaturalTEST, muerenALaVez){
        1:   29-block  0
        1:   29-block  1
        1:   29-block  2
        1:   29-block  3
        1:   29-block  4
        1:   29-block  5
        1:   29-block  6
    $$$$$:   29-block  7
    $$$$$:   29-block  8
    $$$$$:   29-block  9
    $$$$$:   29-block 10
    $$$$$:   29-block 11
    $$$$$:   29-block 12
        1:   29-block 13
        1:   29-block 14
        1:   29-block 15
        1:   29-block 16
        1:   29-block 17
        1:   29-block 18
        1:   29-block 19
        1:   29-block 20
        3:   30:    toroide t1 = {
        1:   30-block  0
        1:   30-block  1
        3:   30-block  2
    $$$$$:   30-block  3
    $$$$$:   30-block  4
    $$$$$:   30-block  5
    $$$$$:   30-block  6
    $$$$$:   30-block  7
    $$$$$:   30-block  8
    $$$$$:   30-block  9
        1:   31:            {true, false, false},
        1:   31-block  0
        1:   32:            {false, true, false},
        1:   32-block  0
        1:   33:            {false, false, true}};
        1:   33-block  0
        5:   34:    toroide t2 = {
        1:   34-block  0
        1:   34-block  1
        5:   34-block  2
    $$$$$:   34-block  3
    $$$$$:   34-block  4
    $$$$$:   34-block  5
    $$$$$:   34-block  6
    $$$$$:   34-block  7
    $$$$$:   34-block  8
        1:   35:            {false, false, false},
        1:   35-block  0
        1:   36:            {false, false, false},
        1:   36-block  0
        1:   37:            {false, true, false},
        1:   37-block  0
        1:   38:            {false, false, false},
        1:   38-block  0
        1:   39:            {false, false, false}};
        1:   39-block  0
        1:   40:    vector<toroide> ts;
        1:   41:    ts.push_back(t1);
        1:   41-block  0
        1:   42:    ts.push_back(t1);
        1:   42-block  0
        1:   43:    ts.push_back(t2);
        1:   43-block  0
        1:   44:    int res = seleccionNatural(ts);
        1:   44-block  0
        1:   44-block  1
    $$$$$:   44-block  2
        1:   45:    EXPECT_EQ(res, 0);
        1:   45-block  0
        1:   45-block  1
        1:   45-block  2
        1:   45-block  3
    $$$$$:   45-block  4
    $$$$$:   45-block  5
    $$$$$:   45-block  6
    $$$$$:   45-block  7
    $$$$$:   45-block  8
    $$$$$:   45-block  9
    $$$$$:   45-block 10
    $$$$$:   45-block 11
        1:   46:}
    $$$$$:   46-block  0
    $$$$$:   46-block  1
    $$$$$:   46-block  2
        1:   46-block  3
    $$$$$:   46-block  4
    $$$$$:   46-block  5
        -:   47:
        7:   48:TEST(seleccionNaturalTEST, esperaResDifCero){
        1:   48-block  0
        1:   48-block  1
        1:   48-block  2
        1:   48-block  3
        1:   48-block  4
        1:   48-block  5
        1:   48-block  6
    $$$$$:   48-block  7
    $$$$$:   48-block  8
    $$$$$:   48-block  9
    $$$$$:   48-block 10
    $$$$$:   48-block 11
    $$$$$:   48-block 12
        1:   48-block 13
        1:   48-block 14
        1:   48-block 15
        1:   48-block 16
        1:   48-block 17
        1:   48-block 18
        1:   48-block 19
        1:   48-block 20
        3:   49:    toroide t1 = {{true, false, false},
        1:   49-block  0
        1:   49-block  1
        1:   49-block  2
        3:   49-block  3
    $$$$$:   49-block  4
    $$$$$:   49-block  5
    $$$$$:   49-block  6
    $$$$$:   49-block  7
    $$$$$:   49-block  8
    $$$$$:   49-block  9
    $$$$$:   49-block 10
        1:   50:                  {false, true, false},
        1:   50-block  0
        1:   51:                  {false, false, true}};
        1:   51-block  0
        5:   52:    toroide t2 = {
        1:   52-block  0
        1:   52-block  1
        5:   52-block  2
    $$$$$:   52-block  3
    $$$$$:   52-block  4
    $$$$$:   52-block  5
    $$$$$:   52-block  6
    $$$$$:   52-block  7
    $$$$$:   52-block  8
        1:   53:            {false, false, false},
        1:   53-block  0
        1:   54:            {false, false, false},
        1:   54-block  0
        1:   55:            {false, true, false},
        1:   55-block  0
        1:   56:            {false, false, false},
        1:   56-block  0
        1:   57:            {false, false, false}};
        1:   57-block  0
        1:   58:    vector<toroide> ts;
        1:   59:    ts.push_back(t2);
        1:   59-block  0
        1:   60:    ts.push_back(t2);
        1:   60-block  0
        1:   61:    ts.push_back(t2);
        1:   61-block  0
        1:   62:    ts.push_back(t2);
        1:   62-block  0
        1:   63:    ts.push_back(t1);
        1:   63-block  0
        1:   64:    ts.push_back(t1);
        1:   64-block  0
        1:   65:    int res = seleccionNatural(ts);
        1:   65-block  0
        1:   65-block  1
    $$$$$:   65-block  2
        1:   66:    EXPECT_EQ(res, 4);
        1:   66-block  0
        1:   66-block  1
        1:   66-block  2
        1:   66-block  3
    $$$$$:   66-block  4
    $$$$$:   66-block  5
    $$$$$:   66-block  6
    $$$$$:   66-block  7
    $$$$$:   66-block  8
    $$$$$:   66-block  9
    $$$$$:   66-block 10
    $$$$$:   66-block 11
        1:   67:}
    $$$$$:   67-block  0
    $$$$$:   67-block  1
    $$$$$:   67-block  2
        1:   67-block  3
    $$$$$:   67-block  4
    $$$$$:   67-block  5
