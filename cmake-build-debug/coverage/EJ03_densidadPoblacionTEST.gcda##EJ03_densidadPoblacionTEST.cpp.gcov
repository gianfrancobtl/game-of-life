        -:    0:Source:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/tests/EJ03_densidadPoblacionTEST.cpp
        -:    0:Graph:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/tests/EJ03_densidadPoblacionTEST.gcno
        -:    0:Data:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/tests/EJ03_densidadPoblacionTEST.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "../ejercicios.h"
        -:    2:#include "gtest/gtest.h"
        -:    3:
        -:    4:using namespace std;
        -:    5:
        7:    6:TEST(densidadPoblacionTEST, toroideDiagonal){
        1:    6-block  0
        1:    6-block  1
        1:    6-block  2
        1:    6-block  3
        1:    6-block  4
        1:    6-block  5
        1:    6-block  6
    $$$$$:    6-block  7
    $$$$$:    6-block  8
    $$$$$:    6-block  9
    $$$$$:    6-block 10
    $$$$$:    6-block 11
    $$$$$:    6-block 12
        1:    6-block 13
        1:    6-block 14
        1:    6-block 15
        1:    6-block 16
        1:    6-block 17
        1:    6-block 18
        1:    6-block 19
        1:    6-block 20
        1:    7:    vector<bool> a = { true, true, true, true };
        5:    8:    toroide t = { a, a, a, a, a };
        1:    8-block  0
        1:    8-block  1
        1:    8-block  2
        1:    8-block  3
        1:    8-block  4
        1:    8-block  5
        1:    8-block  6
        5:    8-block  7
    $$$$$:    8-block  8
    $$$$$:    8-block  9
    $$$$$:    8-block 10
    $$$$$:    8-block 11
    $$$$$:    8-block 12
    $$$$$:    8-block 13
        1:    9:    EXPECT_NEAR(densidadPoblacion(t), 1.0, 0.01);
        1:    9-block  0
        1:    9-block  1
        1:    9-block  2
        1:    9-block  3
        1:    9-block  4
    $$$$$:    9-block  5
    $$$$$:    9-block  6
    $$$$$:    9-block  7
    $$$$$:    9-block  8
    $$$$$:    9-block  9
    $$$$$:    9-block 10
    $$$$$:    9-block 11
    $$$$$:    9-block 12
        1:   10:}
    $$$$$:   10-block  0
    $$$$$:   10-block  1
    $$$$$:   10-block  2
        1:   10-block  3
    $$$$$:   10-block  4
    $$$$$:   10-block  5
    $$$$$:   10-block  6
