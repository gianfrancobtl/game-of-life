        -:    0:Source:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/auxiliares.cpp
        -:    0:Graph:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/auxiliares.gcno
        -:    0:Data:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/auxiliares.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "definiciones.h"
        -:    2:#include "auxiliares.h"
        -:    3:
        -:    4:using namespace std;
        -:    5:
        -:    6:// GENERALES
      299:    7:pair<int,int> mp(int a, int b) {
      299:    7-block  0
      299:    8:    return make_pair(a, b);
      299:    8-block  0
        -:    9:}
        -:   10:
        2:   11:vector<posicion> ordenar(vector<posicion> &v) {
        2:   11-block  0
        2:   12:    sort(v.begin(), v.end());
        2:   13:    return v;
        2:   13-block  0
        -:   14:}
        -:   15:
     8924:   16:int cantFilas (vector<vector<bool>> const &t){
     8924:   16-block  0
     8924:   17:    int size = t.size();
     8924:   18:    return size;
     8924:   18-block  0
        -:   19:}
        -:   20:
     7120:   21:int cantColumnas (vector<vector<bool>> const &t){
     7120:   21-block  0
     7120:   22:    return t[0].size();
     7120:   22-block  0
        -:   23:}
        -:   24:
        -:   25:// EJERCICIO 1
        1:   26:bool esRectangulo (toroide const &t){
        1:   26-block  0
        1:   27:    int longEsperadaFilas = t[0].size();
        1:   28:    bool esRectangulo = true;
        3:   29:    for (int i = 1; i < t.size(); i ++) {
        1:   29-block  0
        3:   29-block  1
        2:   29-block  2
        2:   30:        if (t[i].size() != longEsperadaFilas)
        2:   30-block  0
    #####:   31:            esRectangulo = false;
    $$$$$:   31-block  0
        2:   32:    }
        2:   32-block  0
        1:   33:    return esRectangulo;
        1:   33-block  0
        -:   34:}
        -:   35:
        -:   36:// EJERCICIO 4
      520:   37:bool estaViva(toroide const &t, posicion x){
      520:   37-block  0
      520:   38:    return t[x.first][x.second];
      520:   38-block  0
        -:   39:}
        -:   40:
     2504:   41:bool posVecinaViva(toroide const &t, int f, int c, int i, int j){
     2504:   41-block  0
     2504:   42:    int k = (f + i + cantFilas(t)) % cantFilas(t);
     2504:   43:    int l = (c + j + cantColumnas(t)) % cantColumnas(t);
     2504:   44:    return (t[k][l]);
     2504:   44-block  0
        -:   45:}
        -:   46:
      313:   47:int cantVecinosVivos (toroide const &t, posicion x){
      313:   47-block  0
      313:   48:    int cantVecinosVivos = 0;
      313:   49:    int f = x.first;
      313:   50:    int c = x.second;
     1252:   51:    for (int i = - 1; i <= 1; i ++){
      313:   51-block  0
     1252:   51-block  1
      939:   51-block  2
     3756:   52:        for (int j = - 1; j <= 1; j ++){
      939:   52-block  0
     3756:   52-block  1
     2817:   52-block  2
     2817:   53:            if ((i != 0 || j != 0) && posVecinaViva(t, f, c, i, j))
     2817:   53-block  0
      939:   53-block  1
     2504:   53-block  2
      744:   54:                cantVecinosVivos += 1;
      744:   54-block  0
     2817:   55:        }
     2817:   55-block  0
      939:   56:    }
      939:   56-block  0
      313:   57:    return cantVecinosVivos;
      313:   57-block  0
        -:   58:}
        -:   59:
        -:   60:
        -:   61:// EJERCICIO 7
       26:   62:bool toroideMuerto (toroide const &t){
       26:   62-block  0
       26:   63:    bool estaMuerto = true;
       93:   64:    for (int i = 0; i < cantFilas(t) && estaMuerto; i ++) {
       26:   64-block  0
       93:   64-block  1
       87:   64-block  2
       93:   64-block  3
       67:   64-block  4
      281:   65:        for (int j = 0; j < cantColumnas(t) && estaMuerto; j++) {
       67:   65-block  0
      281:   65-block  1
      234:   65-block  2
      281:   65-block  3
      214:   65-block  4
      214:   66:            if (t[i][j])
      214:   66-block  0
       20:   67:                estaMuerto = false;
       20:   67-block  0
      214:   68:        }
      214:   68-block  0
       67:   69:    }
       67:   69-block  0
       26:   70:    return estaMuerto;
       26:   70-block  0
        -:   71:}
        -:   72:
        -:   73:
        -:   74://EJERCICIOS 11
       31:   75:toroide traslacion(toroide t, int a , int b ){
       31:   75-block  0
       31:   76:    toroide l = t;
      143:   77:    for (int i = 0; i < cantFilas(t) ; ++i) {
       31:   77-block  0
      143:   77-block  1
      143:   77-block  2
      112:   77-block  3
      524:   78:        for (int j = 0; j < cantColumnas(t) ; ++j) {
      112:   78-block  0
      524:   78-block  1
      524:   78-block  2
      412:   78-block  3
      412:   79:            l[(i + a + cantFilas(t)) % cantFilas(t)] [(j + b + cantColumnas(t)) % cantColumnas(t)] = t[i][j];
      412:   79-block  0
      412:   79-block  1
      412:   79-block  2
      412:   79-block  3
      412:   79-block  4
      412:   79-block  5
      412:   80:        }
      412:   80-block  0
      112:   81:    }
      112:   81-block  0
       31:   82:    return l;
       31:   83:}
    $$$$$:   83-block  0
       31:   83-block  1
    $$$$$:   83-block  2
       31:   83-block  3
    $$$$$:   83-block  4
        -:   84:
        -:   85:
        -:   86://EJERCICIO 12
       68:   87:bool filaTieneViva (vector<bool> n){
       68:   88:    bool resp = false;
       68:   88-block  0
      250:   89:    for (int i = 0; i < n.size() && !resp ; ++i){
       68:   89-block  0
      250:   89-block  1
      222:   89-block  2
      250:   89-block  3
      182:   89-block  4
      182:   90:        if (n[i])
      182:   90-block  0
       40:   91:            resp = true;
       40:   91-block  0
      182:   92:    }
      182:   92-block  0
       68:   93:    return resp;
       68:   93-block  0
        -:   94:}
        -:   95:
       20:   96:int primeraFilaViva (toroide t){
       20:   97:    int resultado = 0;
       20:   97-block  0
       20:   98:    bool resp = false;
       52:   99:    for (int i = 0; i < cantFilas(t) && !resp ; ++i){
       20:   99-block  0
       52:   99-block  1
       52:   99-block  2
       52:   99-block  3
       32:   99-block  4
       32:  100:        if (filaTieneViva(t[i])){
       32:  100-block  0
       32:  100-block  1
    $$$$$:  100-block  2
    $$$$$:  100-block  3
       20:  101:            resultado = i;
       20:  102:            resp = true;
       20:  103:        }
       20:  103-block  0
       32:  104:    }
       32:  104-block  0
       20:  105:    return resultado;
       20:  105-block  0
    #####:  106:}
        -:  107:
       20:  108:int ultimaFilaViva (toroide t){
       20:  109:    int resultado = 0;
       20:  109-block  0
       20:  110:    bool resp = false;
       56:  111:    for (int i = cantFilas(t)-1; i > 0 && !resp ; i--){
       20:  111-block  0
       56:  111-block  1
       50:  111-block  2
       56:  111-block  3
       36:  111-block  4
       36:  112:        if (filaTieneViva(t[i])){
       36:  112-block  0
       36:  112-block  1
    $$$$$:  112-block  2
    $$$$$:  112-block  3
       20:  113:            resultado = i;
       20:  114:            resp = true;
       20:  115:        }
       20:  115-block  0
       36:  116:    }
       36:  116-block  0
       20:  117:    return resultado;
       20:  117-block  0
    #####:  118:}
        -:  119:
       20:  120:int primeraColumnaViva(toroide t){
       20:  121:    int result = 0;
       20:  121-block  0
       20:  122:    bool resp = false;
       46:  123:    for (int j = 0; j < cantColumnas(t) && !resp ; ++j){
       20:  123-block  0
       46:  123-block  1
       46:  123-block  2
       46:  123-block  3
       26:  123-block  4
      130:  124:        for (int i = 0; i <cantFilas(t) ; ++i) {
       26:  124-block  0
      130:  124-block  1
      104:  124-block  2
      104:  125:            if (t[i][j]){
      104:  125-block  0
       26:  126:                result = j;
       26:  127:                resp = true;
       26:  128:            }
       26:  128-block  0
      104:  129:        }
      104:  129-block  0
       26:  130:    }
       26:  130-block  0
       20:  131:    return result;
       20:  131-block  0
        -:  132:}
        -:  133:
       20:  134:int ultimaColumnaViva(toroide t){
       20:  135:    int result = 0;
       20:  135-block  0
       20:  136:    bool resp = false;
      528:  137:    for (int j = cantColumnas(t) - 1; j > 0 && !resp ; ++ j){
       20:  137-block  0
      528:  137-block  1
      528:  137-block  2
      528:  137-block  3
      508:  137-block  4
     2540:  138:        for (int i = 0; i < cantFilas(t) ; ++ i){
      508:  138-block  0
     2540:  138-block  1
     2032:  138-block  2
     2032:  139:            if (t[i][j]){
     2032:  139-block  0
       36:  140:                result = j;
       36:  141:                resp = true;
       36:  142:            }
       36:  142-block  0
     2032:  143:        }
     2032:  143-block  0
      508:  144:    }
      508:  144-block  0
       20:  145:    return result;
       20:  145-block  0
        -:  146:}
        -:  147:
       20:  148:int areaTotal (const toroide& t){
       20:  148-block  0
       20:  149:    int cantFilasVivas = ultimaFilaViva(t) - primeraFilaViva(t) + 1;
       20:  149-block  0
       20:  149-block  1
       20:  149-block  2
    $$$$$:  149-block  3
    $$$$$:  149-block  4
    $$$$$:  149-block  5
       20:  150:    int cantColumnasVivas = ultimaColumnaViva(t) - primeraColumnaViva(t) + 1;
       20:  150-block  0
       20:  150-block  1
       20:  150-block  2
    $$$$$:  150-block  3
    $$$$$:  150-block  4
       20:  151:    return cantFilasVivas * cantColumnasVivas;
       20:  151-block  0
    #####:  152:}
    $$$$$:  152-block  0
    $$$$$:  152-block  1
