        -:    0:Source:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/auxiliares.cpp
        -:    0:Graph:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/auxiliares.gcno
        -:    0:Data:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/auxiliares.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "definiciones.h"
        -:    2:#include "auxiliares.h"
        -:    3:
        -:    4:using namespace std;
        -:    5:
        -:    6:// GENERALES
      398:    7:pair<int,int> mp(int a, int b) {
      398:    7-block  0
      398:    8:    return make_pair(a, b);
      398:    8-block  0
        -:    9:}
        -:   10:
        2:   11:vector<posicion> ordenar(vector<posicion> &v) {
        2:   11-block  0
        2:   12:    sort(v.begin(), v.end());
        2:   13:    return v;
        2:   13-block  0
        -:   14:}
        -:   15:
    11032:   16:int cantFilas (vector<vector<bool>> const &t){
    11032:   16-block  0
    11032:   17:    int size = t.size();
    11032:   18:    return size;
    11032:   18-block  0
        -:   19:}
        -:   20:
     9425:   21:int cantColumnas (vector<vector<bool>> const &t){
     9425:   21-block  0
     9425:   22:    return t[0].size();
     9425:   22-block  0
        -:   23:}
        -:   24:
        -:   25:// EJERCICIO 1
        1:   26:bool esRectangulo (vector<vector<bool>> const &t){
        1:   26-block  0
        1:   27:    int longEsperadaFilas = t[0].size();
        1:   28:    bool esRectangulo = true;
        3:   29:    for (int i = 1; i < t.size(); i ++) {
        1:   29-block  0
        3:   29-block  1
        2:   29-block  2
        2:   30:        if (t[i].size() != longEsperadaFilas)
        2:   30-block  0
    #####:   31:            esRectangulo = false;
    $$$$$:   31-block  0
        2:   32:    }
        2:   32-block  0
        1:   33:    return esRectangulo;
        1:   33-block  0
        -:   34:}
        -:   35:
        -:   36:// EJERCICIO 4
      705:   37:bool estaViva(toroide const &t, posicion x){
      705:   37-block  0
      705:   38:    return t[x.first][x.second];
      705:   38-block  0
        -:   39:}
        -:   40:
     3520:   41:bool posVecinaViva(toroide const &t, int f, int c, int i, int j){
     3520:   41-block  0
     3520:   42:    int k = (f + i + cantFilas(t)) % cantFilas(t);
     3520:   43:    int l = (c + j + cantColumnas(t)) % cantColumnas(t);
     3520:   44:    return (t[k][l]);
     3520:   44-block  0
        -:   45:}
        -:   46:
      440:   47:int cantVecinosVivos (toroide const &t, posicion x){
      440:   47-block  0
      440:   48:    int cantVecinosVivos = 0;
      440:   49:    int f = x.first;
      440:   50:    int c = x.second;
     1760:   51:    for (int i = - 1; i <= 1; i ++){
      440:   51-block  0
     1760:   51-block  1
     1320:   51-block  2
     5280:   52:        for (int j = - 1; j <= 1; j ++){
     1320:   52-block  0
     5280:   52-block  1
     3960:   52-block  2
     3960:   53:            if ((i != 0 || j != 0) && posVecinaViva(t, f, c, i, j)){
     3960:   53-block  0
     1320:   53-block  1
     3520:   53-block  2
     1267:   54:                cantVecinosVivos += 1;
     1267:   55:            }
     1267:   55-block  0
     3960:   56:        }
     3960:   56-block  0
     1320:   57:    }
     1320:   57-block  0
      440:   58:    return cantVecinosVivos;
      440:   58-block  0
        -:   59:}
        -:   60:
        -:   61:
        -:   62:// EJERCICIO 7
       41:   63:bool toroideMuerto (toroide const &t){
       41:   63-block  0
       41:   64:    bool estaMuerto = true;
      147:   65:    for (int i = 0; i < cantFilas(t) && estaMuerto; i ++) {
       41:   65-block  0
      147:   65-block  1
      135:   65-block  2
      147:   65-block  3
      106:   65-block  4
      422:   66:        for (int j = 0; j < cantColumnas(t) && estaMuerto; j++) {
      106:   66-block  0
      422:   66-block  1
      345:   66-block  2
      422:   66-block  3
      316:   66-block  4
      316:   67:            if (t[i][j]) {
      316:   67-block  0
       29:   68:                estaMuerto = false;
       29:   69:            }
       29:   69-block  0
      316:   70:        }
      316:   70-block  0
      106:   71:    }
      106:   71-block  0
       41:   72:    return estaMuerto;
       41:   72-block  0
        -:   73:}
        -:   74:
        -:   75:
        -:   76:
        -:   77://EJERCICIOS 11
       31:   78:toroide traslacion(toroide t, int a , int b ){
       31:   78-block  0
       31:   79:    toroide l = t;
      143:   80:    for (int i = 0; i < cantFilas(t) ; ++i) {
       31:   80-block  0
      143:   80-block  1
      143:   80-block  2
      112:   80-block  3
      524:   81:        for (int j = 0; j < cantColumnas(t) ; ++j) {
      112:   81-block  0
      524:   81-block  1
      524:   81-block  2
      412:   81-block  3
      412:   82:            l[(i + a + cantFilas(t)) % cantFilas(t)] [(j + b + cantColumnas(t)) % cantColumnas(t)] = t[i][j];
      412:   82-block  0
      412:   82-block  1
      412:   82-block  2
      412:   82-block  3
      412:   82-block  4
      412:   82-block  5
      412:   83:        }
      412:   83-block  0
      112:   84:    }
      112:   84-block  0
       31:   85:    return l;
       31:   86:}
    $$$$$:   86-block  0
       31:   86-block  1
    $$$$$:   86-block  2
       31:   86-block  3
    $$$$$:   86-block  4
        -:   87:
        -:   88:
        -:   89:
        -:   90://EJERCICIO 12
       68:   91:bool filaTieneViva (vector<bool> n){
       68:   92:    bool resp = false;
       68:   92-block  0
      250:   93:    for (int i = 0; i < n.size() && !resp ; ++i) {
       68:   93-block  0
      250:   93-block  1
      222:   93-block  2
      250:   93-block  3
      182:   93-block  4
      182:   94:        if (n[i]){
      182:   94-block  0
       40:   95:            resp = true;
       40:   96:        }
       40:   96-block  0
      182:   97:    }
      182:   97-block  0
       68:   98:    return resp;
       68:   98-block  0
        -:   99:}
        -:  100:
        -:  101:
       20:  102:int primeraFilaViva (toroide t){
       20:  103:    int resultado = 0;
       20:  103-block  0
       20:  104:    bool resp = false;
       52:  105:    for (int i = 0; i < cantFilas(t) && !resp ; ++i) {
       20:  105-block  0
       52:  105-block  1
       52:  105-block  2
       52:  105-block  3
       32:  105-block  4
       32:  106:        if (filaTieneViva(t[i])){
       32:  106-block  0
       32:  106-block  1
    $$$$$:  106-block  2
    $$$$$:  106-block  3
       20:  107:            resultado = i;
       20:  108:            resp = true;
       20:  109:        }
       20:  109-block  0
       32:  110:    }
       32:  110-block  0
       20:  111:    return resultado;
       20:  111-block  0
    #####:  112:}
        -:  113:
       20:  114:int ultimaFilaViva (toroide t){
       20:  115:    int resultado = 0;
       20:  115-block  0
       20:  116:    bool resp = false;
       56:  117:    for (int i = cantFilas(t)-1; i > 0 && !resp ; i--) {
       20:  117-block  0
       56:  117-block  1
       50:  117-block  2
       56:  117-block  3
       36:  117-block  4
       36:  118:        if (filaTieneViva(t[i])){
       36:  118-block  0
       36:  118-block  1
    $$$$$:  118-block  2
    $$$$$:  118-block  3
       20:  119:            resultado = i;
       20:  120:            resp = true;
       20:  121:        }
       20:  121-block  0
       36:  122:    }
       36:  122-block  0
       20:  123:    return resultado;
       20:  123-block  0
    #####:  124:}
        -:  125:
       20:  126:int primeraColumnaViva(toroide t){
       20:  127:    int result = 0;
       20:  127-block  0
       20:  128:    bool resp = false;
       46:  129:    for (int j = 0; j < cantColumnas(t) && !resp ; ++j) {
       20:  129-block  0
       46:  129-block  1
       46:  129-block  2
       46:  129-block  3
       26:  129-block  4
      130:  130:        for (int i = 0; i <cantFilas(t) ; ++i) {
       26:  130-block  0
      130:  130-block  1
      104:  130-block  2
      104:  131:            if (t[i][j]){
      104:  131-block  0
       26:  132:                result = j;
       26:  133:                resp = true;
       26:  134:            }
       26:  134-block  0
      104:  135:        }
      104:  135-block  0
       26:  136:    }
       26:  136-block  0
       20:  137:    return result;
       20:  137-block  0
        -:  138:}
        -:  139:
       20:  140:int ultimaColumnaViva(toroide t){
       20:  141:    int result = 0;
       20:  141-block  0
       20:  142:    bool resp = false;
      524:  143:    for (int j = cantColumnas(t) -1; j > 0 && !resp ; ++j) {
       20:  143-block  0
      524:  143-block  1
      524:  143-block  2
      524:  143-block  3
      504:  143-block  4
     2520:  144:        for (int i = 0; i <cantFilas(t) ; ++i) {
      504:  144-block  0
     2520:  144-block  1
     2016:  144-block  2
     2016:  145:            if (t[i][j]){
     2016:  145-block  0
       36:  146:                result = j;
       36:  147:                resp = true;
       36:  148:            }
       36:  148-block  0
     2016:  149:        }
     2016:  149-block  0
      504:  150:    }
      504:  150-block  0
       20:  151:    return result;
       20:  151-block  0
        -:  152:}
        -:  153:
       20:  154:int areaTotal (toroide t){
       20:  155:    int cantFilaViva = ultimaFilaViva(t) - primeraFilaViva(t) + 1;
       20:  155-block  0
       20:  155-block  1
       20:  155-block  2
       20:  155-block  3
    $$$$$:  155-block  4
    $$$$$:  155-block  5
    $$$$$:  155-block  6
       20:  156:    int cantColumnaViva = ultimaColumnaViva(t) - primeraColumnaViva(t) + 1;
       20:  156-block  0
       20:  156-block  1
       20:  156-block  2
    $$$$$:  156-block  3
    $$$$$:  156-block  4
       20:  157:    return cantFilaViva * cantColumnaViva;
       20:  157-block  0
    #####:  158:}
    $$$$$:  158-block  0
    $$$$$:  158-block  1
