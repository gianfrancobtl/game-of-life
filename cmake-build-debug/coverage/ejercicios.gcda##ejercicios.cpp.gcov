        -:    0:Source:C:/Users/ramir/Desktop/TPI FINALIZADO/tpi_final/ejercicios.cpp
        -:    0:Graph:C:\Users\ramir\Desktop\TPI FINALIZADO\tpi_final\cmake-build-debug\CMakeFiles\juegoDeLaVida.dir\ejercicios.gcno
        -:    0:Data:C:\Users\ramir\Desktop\TPI FINALIZADO\tpi_final\cmake-build-debug\CMakeFiles\juegoDeLaVida.dir\ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <algorithm>
        -:    2:#include "ejercicios.h"
        -:    3:#include "auxiliares.h"
        -:    4:
        -:    5:// EJERCICIO 1
        8:    6:bool toroideValido(vector<vector<bool>> const &t) {
        8:    7:    bool resp = false;
        8:    8:    if (cantFilas(t) >= 3 && cantColumnas(t) >= 3 && esRectangulo(t))
        8:    8-block  0
        6:    8-block  1
        4:    8-block  2
        2:    8-block  3
        6:    8-block  4
        8:    8-block  5
        2:    9:        resp = true;
        2:    9-block  0
        8:   10:    return resp;
        8:   10-block  0
        -:   11:}
        -:   12:
        -:   13:// EJERCICIO 2
        6:   14:vector<posicion> posicionesVivas(toroide const &t) {
        6:   15:    vector<posicion> vivos;
        6:   15-block  0
       31:   16:    for (int i = 0; i < cantFilas(t); i ++){
       31:   16-block  0
       31:   16-block  1
       25:   16-block  2
      111:   17:        for (int j = 0 ; j < cantColumnas(t); j ++){
       25:   17-block  0
      111:   17-block  1
      111:   17-block  2
       86:   17-block  3
       86:   18:            if (t[i][j])
       86:   18-block  0
       41:   19:                vivos.push_back(mp(i,j));
       41:   19-block  0
       41:   19-block  1
       41:   19-block  2
    $$$$$:   19-block  3
        -:   20:        }
        -:   21:    }
        6:   22:    return vivos;
        6:   22-block  0
        6:   22-block  1
        -:   23:}
        -:   24:
        -:   25:// EJERCICIO 3
        3:   26:float densidadPoblacion(toroide const &t) {
        3:   27:    float cantidadViva = posicionesVivas(t).size();
        3:   27-block  0
        3:   28:    float superficieTotal = float(cantFilas(t)) * float(cantColumnas(t));
        3:   29:    return cantidadViva / superficieTotal;
        -:   30:}
        -:   31:
        -:   32:// EJERCICIO 4
      695:   33:bool evolucionDePosicion(toroide const &t, posicion x) {
        -:   34:    bool resp;
     1351:   35:    if ((estaViva(t, x) && (cantVecinosVivos(t, x) == 2 || cantVecinosVivos(t, x) == 3)) ||
      695:   35-block  0
      111:   35-block  1
       76:   35-block  2
      100:   35-block  3
      595:   35-block  4
      695:   35-block  5
      656:   36:    (!estaViva(t, x) && cantVecinosVivos(t, x) == 3))
      656:   36-block  0
      584:   36-block  1
      100:   37:        resp = true;
      100:   37-block  0
        -:   38:    else
      595:   39:        resp = false;
      595:   39-block  0
        -:   40:
      695:   41:    return resp;
      695:   41-block  0
        -:   42:}
        -:   43:
        -:   44:// EJERCICIO 5
       32:   45:void evolucionToroide(toroide &t){
       64:   46:    toroide toroideOriginal = t;
       32:   46-block  0
       32:   46-block  1
    $$$$$:   46-block  2
      167:   47:    for (int i = 0; i < cantFilas(t); i ++) {
       32:   47-block  0
      167:   47-block  1
      167:   47-block  2
      135:   47-block  3
      822:   48:        for (int j = 0; j < cantColumnas(t); j++) {
      135:   48-block  0
      822:   48-block  1
      822:   48-block  2
      687:   49:            t[i][j] = evolucionDePosicion(toroideOriginal, mp(i, j));
      687:   49-block  0
      687:   49-block  1
      687:   49-block  2
        -:   50:        }
        -:   51:    }
       32:   52:}
        -:   53:
        -:   54:// EJERCICIO 6
        3:   55:toroide evolucionMultiple(toroide const &t, int K) {
        3:   56:    toroide out = t;
        3:   56-block  0
       12:   57:    for (int k = K; k > 0; k --)
       12:   57-block  0
        9:   57-block  1
        9:   58:        evolucionToroide(out);
        9:   58-block  0
        3:   59:    return out;
        3:   59-block  0
        3:   59-block  1
        -:   60:}
        -:   61:
        -:   62:// EJERCICIO 7
        4:   63:bool esPeriodico(toroide const& t, int &p) {
        4:   64:    bool resp = false;
        4:   65:    p = 0;
        4:   66:    toroide toroideOut = t;
        4:   66-block  0
    $$$$$:   66-block  1
       10:   67:    while (!toroideMuerto(toroideOut) && !resp){
       10:   67-block  0
       10:   67-block  1
        9:   67-block  2
        6:   67-block  3
        4:   67-block  4
       10:   67-block  5
        6:   67-block  6
        6:   68:        p ++;
        6:   69:        evolucionToroide(toroideOut);
        6:   69-block  0
        6:   70:        if (t == toroideOut)
        6:   70-block  0
        6:   70-block  1
        3:   71:            resp = true;
        3:   71-block  0
        -:   72:    }
        8:   73:    return resp;
        4:   73-block  0
        4:   73-block  1
        -:   74:}
        -:   75:
        -:   76:// EJERCICIO 8
        2:   77:bool primosLejanos(toroide const &t, toroide const &u) {
        2:   78:    bool resp = false;
        4:   79:    toroide genericoT = t;
        2:   79-block  0
    $$$$$:   79-block  1
        2:   80:    toroide genericoU = u;
        2:   80-block  0
    $$$$$:   80-block  1
        4:   81:    while (!toroideMuerto(genericoT) && !toroideMuerto(genericoU) && !resp){
        4:   81-block  0
        4:   81-block  1
        4:   81-block  2
        4:   81-block  3
        4:   81-block  4
        2:   81-block  5
        2:   81-block  6
        4:   81-block  7
        2:   81-block  8
        2:   82:        evolucionToroide(genericoT);
        2:   82-block  0
        2:   83:        evolucionToroide(genericoU);
        2:   83-block  0
       2*:   84:        if ( genericoT == u || genericoU == t)
        2:   84-block  0
        2:   84-block  1
    %%%%%:   84-block  2
    %%%%%:   84-block  3
        2:   84-block  4
    %%%%%:   84-block  5
        2:   84-block  6
        2:   85:            resp = true;
        2:   85-block  0
        -:   86:    }
        4:   87:    return resp;
        2:   87-block  0
        2:   87-block  1
        -:   88:}
        -:   89:
        -:   90:// EJERCICIO 9
        2:   91:int seleccionNatural(vector <toroide> ts) {
        2:   92:    int resp = -1;
        2:   93:    int mayorCantTicks = -1;
        8:   94:    for (int i = 0; i < ts.size(); i ++){
        2:   94-block  0
        8:   94-block  1
       12:   95:        toroide evoT = ts[i];
        6:   95-block  0
        6:   95-block  1
    $$$$$:   95-block  2
        6:   96:        int k = 0;
        6:   96-block  0
       15:   97:        while (!toroideMuerto(evoT)){
       15:   97-block  0
       15:   97-block  1
        9:   98:            evolucionToroide(evoT);
        9:   98-block  0
        9:   99:            k ++;
        9:   99-block  0
        -:  100:        }
        6:  101:        if (k > mayorCantTicks){
        6:  101-block  0
        2:  102:            resp = i;
        2:  103:            mayorCantTicks = k;
        2:  103-block  0
        -:  104:        }
        -:  105:    }
        2:  106:    return resp;
        2:  106-block  0
        2:  106-block  1
        -:  107:}
        -:  108:
        -:  109:
        -:  110:// EJERCICIO 10
        3:  111:toroide fusionar(toroide const &t, toroide const &u) {
        6:  112:    toroide out (cantFilas(t), vector<bool>(cantColumnas(t)));
        3:  112-block  0
        3:  112-block  1
        3:  112-block  2
        3:  112-block  3
    $$$$$:  112-block  4
    $$$$$:  112-block  5
    $$$$$:  112-block  6
       12:  113:    for (int i = 0; i < cantFilas(t); i ++) {
       12:  113-block  0
       12:  113-block  1
        9:  113-block  2
       39:  114:        for (int j = 0; j < cantColumnas(t); j ++) {
        9:  114-block  0
       39:  114-block  1
       39:  114-block  2
       30:  114-block  3
       30:  115:            if (t[i][j] && u[i][j])
       30:  115-block  0
       19:  115-block  1
        3:  115-block  2
       27:  115-block  3
       30:  115-block  4
        3:  116:                out [i][j] = true;
        3:  116-block  0
        -:  117:            else
       27:  118:                out [i][j] = false;
       27:  118-block  0
        -:  119:        }
        -:  120:    }
        3:  121:    return out;
        3:  121-block  0
        3:  121-block  1
        -:  122:}
        -:  123:
        -:  124:// EJERCICIO 11
        3:  125:bool vistaTrasladada(toroide const &t, toroide const &u){
        3:  126:    bool resp = false;
        8:  127:    for (int i = 0; i < cantFilas(t) && !resp ; ++i) {
        3:  127-block  0
        8:  127-block  1
        7:  127-block  2
        5:  127-block  3
        3:  127-block  4
        8:  127-block  5
        5:  127-block  6
       20:  128:        for (int j = 0; j < cantColumnas(t) ; ++j) {
        5:  128-block  0
       20:  128-block  1
       15:  128-block  2
       15:  129:            if (traslacion(t,i,j) == u)
       15:  129-block  0
       15:  129-block  1
       15:  129-block  2
    $$$$$:  129-block  3
    $$$$$:  129-block  4
    $$$$$:  129-block  5
        2:  130:                resp = true;
        2:  130-block  0
        -:  131:        }
        -:  132:    }
        3:  133:    return resp;
        3:  133-block  0
        3:  133-block  1
        -:  134:}
        -:  135:
        -:  136:// EJERCICIO 12
        -:  137:
        3:  138:int menorSuperficieViva(toroide const &t){
        3:  139:    int resp = areaTotal(t);
        3:  139-block  0
       14:  140:    for (int i = 0; i < t.size() ; ++ i) {
       14:  140-block  0
       11:  140-block  1
       55:  141:        for (int j = 0; j < t[0].size() ; ++ j) {
       11:  141-block  0
       55:  141-block  1
       44:  141-block  2
       44:  142:            if (resp > areaTotal(traslacion(t,i,j)))
       44:  142-block  0
       44:  142-block  1
       44:  142-block  2
    $$$$$:  142-block  3
    $$$$$:  142-block  4
    $$$$$:  142-block  5
    $$$$$:  142-block  6
        5:  143:                resp = areaTotal(traslacion(t,i,j));
        5:  143-block  0
        5:  143-block  1
        5:  143-block  2
    $$$$$:  143-block  3
    $$$$$:  143-block  4
    $$$$$:  143-block  5
        -:  144:        }
        -:  145:    }
        3:  146:    return resp;
        3:  146-block  0
        3:  146-block  1
        -:  147:}
        -:  148:
