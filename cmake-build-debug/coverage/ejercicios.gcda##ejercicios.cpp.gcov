        -:    0:Source:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/ejercicios.cpp
        -:    0:Graph:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/ejercicios.gcno
        -:    0:Data:/Users/gianbattolla/Documents/Año 2020 - Cs. de la computación/Algoritmos y Estructuras de Datos 1/Trabajo Practico de Implementación - Juego de la Vida-20201031/tpi_final/cmake-build-debug/CMakeFiles/juegoDeLaVida.dir/ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <algorithm>
        -:    2:#include "ejercicios.h"
        -:    3:#include "auxiliares.h"
        -:    4:
        -:    5:// EJERCICIO 1
        8:    6:bool toroideValido(vector<vector<bool>> const &t) {
        8:    6-block  0
        8:    7:    bool resp = false;
        8:    8:    if (cantFilas(t) >= 3 && cantColumnas(t) >= 3 && esRectangulo(t))
        8:    8-block  0
        6:    8-block  1
        4:    8-block  2
        2:    9:        resp = true;
        2:    9-block  0
        8:   10:    return resp;
        8:   10-block  0
        -:   11:}
        -:   12:
        -:   13:// EJERCICIO 2
        8:   14:vector<posicion> posicionesVivas(toroide const &t) {
        8:   14-block  0
        8:   15:    vector<posicion> vivos;
       44:   16:    for (int i = 0; i < cantFilas(t); i ++){
        8:   16-block  0
       44:   16-block  1
       44:   16-block  2
       36:   16-block  3
      160:   17:        for (int j = 0 ; j < cantColumnas(t); j ++){
       36:   17-block  0
      160:   17-block  1
      160:   17-block  2
      124:   17-block  3
      124:   18:            if (t[i][j])
      124:   18-block  0
      124:   18-block  1
       44:   19:                vivos.push_back(mp(i,j));
       44:   19-block  0
       44:   19-block  1
       44:   19-block  2
      124:   20:        }
      124:   20-block  0
       36:   21:    }
       36:   21-block  0
        8:   22:    return vivos;
        8:   23:}
    $$$$$:   23-block  0
        8:   23-block  1
    $$$$$:   23-block  2
        8:   23-block  3
    $$$$$:   23-block  4
        -:   24:
        -:   25:// EJERCICIO 3
        4:   26:float densidadPoblacion(toroide const &t) {
        4:   26-block  0
        4:   27:    float cantidadViva = posicionesVivas(t).size();
        4:   28:    float superficieTotal = float(cantFilas(t)) * float(cantColumnas(t));
        4:   29:    return cantidadViva / superficieTotal;
        4:   29-block  0
        -:   30:}
        -:   31:
        -:   32:// EJERCICIO 4
     5612:   33:bool evolucionDePosicion(toroide const &t, posicion x) {
     5612:   33-block  0
     5612:   34:    bool resp = false;
     5612:   35:    if ((estaViva(t, x) && (cantVecinosVivos(t, x) == 2 || cantVecinosVivos(t, x) == 3)) || (!estaViva(t, x) && cantVecinosVivos(t, x) == 3))
     5612:   35-block  0
      401:   35-block  1
      286:   35-block  2
     5457:   35-block  3
     5211:   35-block  4
      332:   36:        resp = true;
      332:   36-block  0
     5612:   37:    return resp;
     5612:   37-block  0
        -:   38:}
        -:   39:
        -:   40:// EJERCICIO 5
       87:   41:void evolucionToroide(toroide &t){
       87:   41-block  0
       87:   42:    toroide toroideOriginal = t;
      699:   43:    for (int i = 0; i < cantFilas(t); i ++) {
       87:   43-block  0
      699:   43-block  1
      699:   43-block  2
      612:   43-block  3
     6216:   44:        for (int j = 0; j < cantColumnas(t); j++) {
      612:   44-block  0
     6216:   44-block  1
     6216:   44-block  2
     5604:   44-block  3
     5604:   45:            t[i][j] = evolucionDePosicion(toroideOriginal, mp(i, j));
     5604:   45-block  0
     5604:   45-block  1
     5604:   45-block  2
     5604:   46:        }
     5604:   46-block  0
      612:   47:    }
      612:   47-block  0
       87:   48:}
    $$$$$:   48-block  0
       87:   48-block  1
    $$$$$:   48-block  2
        -:   49:
        -:   50:// EJERCICIO 6
        3:   51:toroide evolucionMultiple(toroide const &t, int K) {
        3:   51-block  0
        3:   52:    toroide out = t;
       12:   53:    for (int k = K; k > 0; k --)
        3:   53-block  0
       12:   53-block  1
        9:   53-block  2
        9:   54:        evolucionToroide(out);
        9:   54-block  0
        9:   54-block  1
        3:   55:    return out;
        3:   56:}
    $$$$$:   56-block  0
        3:   56-block  1
    $$$$$:   56-block  2
        3:   56-block  3
    $$$$$:   56-block  4
        -:   57:
        -:   58:// EJERCICIO 7
       15:   59:bool esPeriodico(toroide const& t, int &p) {
       15:   59-block  0
       15:   60:    bool resp = false;
       15:   61:    int pInicial = p;
       15:   62:    p = 0;
       15:   63:    toroide toroideOut = t;
       47:   64:    while (!toroideMuerto(toroideOut) && !resp){
       15:   64-block  0
       47:   64-block  1
       47:   64-block  2
       42:   64-block  3
       47:   64-block  4
       32:   64-block  5
       32:   65:        p ++;
       32:   66:        evolucionToroide(toroideOut);
       32:   66-block  0
       32:   67:        if (t == toroideOut)
       32:   67-block  0
       32:   67-block  1
       10:   68:            resp = true;
       10:   68-block  0
        -:   69:    }
       15:   70:    if (!resp){
       15:   70-block  0
        5:   71:        p = pInicial;
        5:   72:    }
        5:   72-block  0
       15:   73:    return resp;
       15:   74:}
    $$$$$:   74-block  0
       15:   74-block  1
    $$$$$:   74-block  2
        -:   75:
        -:   76:// EJERCICIO 8
       10:   77:bool primosLejanos(toroide const &t, toroide const &u) {
       10:   77-block  0
       10:   78:    bool resp = false;
       10:   79:    toroide genericoT = t;
        -:   80:    int p;
        -:   81:    int i;
       10:   82:    if (esPeriodico(t,p)){
       10:   82-block  0
       10:   82-block  1
        7:   83:        i = p;
        7:   84:    } else {
        7:   84-block  0
        3:   85:        i = 0;
       10:   86:        while (!toroideMuerto(genericoT)){
        3:   86-block  0
       10:   86-block  1
       10:   86-block  2
        7:   86-block  3
        7:   87:            evolucionToroide(genericoT);
        7:   87-block  0
        7:   88:            i ++;
        -:   89:        }
        -:   90:    }
       10:   91:    genericoT = t;
       10:   91-block  0
       28:   92:    while (!resp && i > 0){
       10:   92-block  0
       28:   92-block  1
       26:   92-block  2
       28:   92-block  3
       18:   92-block  4
       18:   93:        evolucionToroide(genericoT);
       18:   93-block  0
       18:   94:        if (genericoT == u)
       18:   94-block  0
       18:   94-block  1
        2:   95:            resp = true;
        2:   95-block  0
       18:   96:        i --;
        -:   97:    }
       10:   98:    return resp;
       10:   99:}
    $$$$$:   99-block  0
       10:   99-block  1
    $$$$$:   99-block  2
        -:  100:
        -:  101:// EJERCICIO 9
        3:  102:int seleccionNatural(vector <toroide> ts) {
        3:  103:    int resp = -1;
        3:  103-block  0
        3:  104:    int mayorCantTicks = -1;
       15:  105:    for (int i = 0; i < ts.size(); i ++){
        3:  105-block  0
       15:  105-block  1
       12:  105-block  2
       12:  106:        toroide evoT = ts[i];
       12:  107:        int k = 0;
       29:  108:        while (!toroideMuerto(evoT)){
       12:  108-block  0
       29:  108-block  1
       29:  108-block  2
       17:  108-block  3
       17:  109:            evolucionToroide(evoT);
       17:  109-block  0
       17:  110:            k ++;
        -:  111:        }
       12:  112:        if (k > mayorCantTicks){
       12:  112-block  0
        4:  113:            resp = i;
        4:  114:            mayorCantTicks = k;
        4:  115:        }
        4:  115-block  0
       12:  116:    }
    $$$$$:  116-block  0
       12:  116-block  1
    $$$$$:  116-block  2
        3:  117:    return resp;
        3:  117-block  0
    #####:  118:}
        -:  119:
        -:  120:
        -:  121:// EJERCICIO 10
        3:  122:toroide fusionar(toroide const &t, toroide const &u) {
        3:  122-block  0
        3:  123:    toroide out (cantFilas(t), vector<bool>(cantColumnas(t)));
        3:  123-block  0
    $$$$$:  123-block  1
    $$$$$:  123-block  2
       12:  124:    for (int i = 0; i < cantFilas(t); i ++) {
        3:  124-block  0
       12:  124-block  1
       12:  124-block  2
        9:  124-block  3
       39:  125:        for (int j = 0; j < cantColumnas(t); j ++) {
        9:  125-block  0
       39:  125-block  1
       39:  125-block  2
       30:  125-block  3
       30:  126:            if (t[i][j] && u[i][j])
       30:  126-block  0
       30:  126-block  1
       19:  126-block  2
       19:  126-block  3
       30:  126-block  4
        3:  127:                out [i][j] = true;
        3:  127-block  0
        3:  127-block  1
        -:  128:            else
       27:  129:                out [i][j] = false;
       27:  129-block  0
       27:  129-block  1
       30:  130:        }
       30:  130-block  0
        9:  131:    }
        9:  131-block  0
        3:  132:    return out;
        3:  133:}
    $$$$$:  133-block  0
        3:  133-block  1
    $$$$$:  133-block  2
        3:  133-block  3
        -:  134:
        -:  135:// EJERCICIO 11
        4:  136:bool vistaTrasladada(toroide const &t, toroide const &u){
        4:  136-block  0
        4:  137:    bool resp = false;
        4:  138:    int i = 0;
       10:  139:    while (i < cantFilas(t) && !resp) {
        4:  139-block  0
       10:  139-block  1
        9:  139-block  2
       10:  139-block  3
        6:  139-block  4
       24:  140:        for (int j = 0; j < cantColumnas(t); j ++) {
        6:  140-block  0
       24:  140-block  1
       18:  140-block  2
       18:  141:            if (traslacion(t,i,j) == u)
       18:  141-block  0
       18:  141-block  1
       18:  141-block  2
    $$$$$:  141-block  3
    $$$$$:  141-block  4
    $$$$$:  141-block  5
        3:  142:                resp = true;
        3:  142-block  0
       18:  143:        }
       18:  143-block  0
        6:  144:        i ++;
        -:  145:    }
        4:  146:    return resp;
        4:  146-block  0
    #####:  147:}
    $$$$$:  147-block  0
        -:  148:
        -:  149:// EJERCICIO 12
        3:  150:int menorSuperficieViva(toroide const &t){
        3:  150-block  0
        3:  151:    int resp = areaTotal(t);
       14:  152:    for (int i = 0; i < cantFilas(t); ++ i) {
        3:  152-block  0
       14:  152-block  1
       11:  152-block  2
       44:  153:        for (int j = 1; j < cantColumnas(t); ++ j) {
       11:  153-block  0
       44:  153-block  1
       33:  153-block  2
       33:  154:            int areaRectanguloVivo = areaTotal(traslacion(t,i,j));
       33:  154-block  0
       33:  154-block  1
    $$$$$:  154-block  2
    $$$$$:  154-block  3
    $$$$$:  154-block  4
       33:  155:            if (areaRectanguloVivo < resp)
       33:  155-block  0
        2:  156:                resp = areaRectanguloVivo;
        2:  156-block  0
       33:  157:        }
       33:  157-block  0
       11:  158:    }
       11:  158-block  0
        3:  159:    return resp;
        3:  159-block  0
    #####:  160:}
    $$$$$:  160-block  0
        -:  161:
